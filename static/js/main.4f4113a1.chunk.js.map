{"version":3,"sources":["store/actions/generalActions.js","Components/Sender.js","Components/Receiver.js","App.js","store/reducers/rootReducer.js","serviceWorker.js","index.js"],"names":["updateMessage","message","dispatch","getState","type","Sender","state","props","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","className","onSubmit","this","onChange","Component","connect","App","initState","rootReducer","action","console","log","Boolean","window","location","hostname","match","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qSASeA,EAPc,SAACC,GAE5B,OAAO,SAACC,EAAUC,GAChBD,EAAS,CAACE,KAAM,eAAgBH,cCD9BI,E,4MAEJC,MAAQ,CACNL,QAAQ,EAAKM,MAAMN,S,EAGrBO,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,S,EAI5BC,aAAe,SAACL,GACdA,EAAEM,iBACF,EAAKR,MAAMP,cAAc,EAAKM,MAAML,U,uDAKpC,OACE,yBAAKe,UAAU,oBACb,0BAAMC,SAAUC,KAAKJ,cACnB,sCACA,2BAAOV,KAAK,OAAOQ,GAAG,UAAUO,SAAUD,KAAKV,aAAcK,MAAOK,KAAKZ,MAAML,UAC/E,2BAAOG,KAAK,SAASS,MAAM,iB,GAxBhBO,aA4CNC,eAbS,SAACf,GACvB,MAAO,CACLL,QAASK,EAAML,YAIQ,SAACC,GAC1B,MAAO,CACLF,cAAe,SAACC,GAAD,OAAaC,EAASF,EAAcC,QAKxCoB,CAA6ChB,GC7B7CgB,eANS,SAAAf,GACtB,MAAO,CACLL,QAASK,EAAML,WAIJoB,EAhBE,SAACd,GAEhB,OACE,yBAAKS,UAAU,oBACb,wCACA,yBAAKA,UAAU,eAAeT,EAAMN,aC4B3BqB,E,uKAtBX,OACE,yBAAKN,UAAU,aACb,wBAAIA,UAAU,IAAd,+BACA,sEACA,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,cACb,kBAAC,EAAD,c,GAbII,a,QCXZG,EAAY,CAChBtB,QAAQ,eAmBKuB,EAhBK,WAAgC,IAA/BlB,EAA8B,uDAAtBiB,EAAWE,EAAW,uCAEjD,OAAQA,EAAOrB,MACb,IAAK,eAGH,OAFAsB,QAAQC,IAAI,eAAgBF,EAAOxB,SAE5B,eACFK,EADL,CAEEL,QAASwB,EAAOxB,UAGrB,QACG,OAAOK,ICJOsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAAIC,EAAQC,YAAYV,EAAaW,YAAgBC,MAErDC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUN,MAAOA,GAChB,kBAAC,EAAD,QAGFO,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMhD,c","file":"static/js/main.4f4113a1.chunk.js","sourcesContent":["\n\nexport const updateMessage = (message) => {\n\n  return (dispatch, getState) => {\n    dispatch({type: 'CHANGE_STATE', message})\n  }\n}\n\nexport default updateMessage\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport updateMessage from '../store/actions/generalActions'\n\nclass Sender extends Component {\n\n  state = {\n    message:this.props.message \n  }\n\n  handleChange = (e) =>{\n    this.setState({\n      [e.target.id]: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.updateMessage(this.state.message)\n  }\n\n  render() {\n\n    return (\n      <div className=\"component-border\">\n        <form onSubmit={this.handleSubmit}>\n          <h3>Sender</h3>\n          <input type=\"text\" id=\"message\" onChange={this.handleChange} value={this.state.message} />\n          <input type=\"submit\" value=\"submit\"/>\n        </form>\n      </div >\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message\n  };\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    updateMessage: (message) => dispatch(updateMessage(message)) \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Sender)","import React from 'react'\nimport { connect } from 'react-redux';\n\nconst Receiver = (props) => {\n  \n  return (\n    <div className=\"component-border\">\n      <h3>Receiver</h3>\n      <div className=\"message-box\">{props.message}</div>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    message: state.message\n  };\n}\n\nexport default connect(mapStateToProps)(Receiver)","import React, { Component } from 'react';\n\nimport './App.css';\nimport Sender from './Components/Sender'\nimport Receiver from './Components/Receiver'\n\n//\n// ReactReduxSenderReceiver\n// Demonstrates the use of a Redux store to show two components interacting\n//\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1 className=\"\">React/Redux Sender-Receiver</h1>\n        <h3>Example to show the use of React/Redux</h3>\n        <div className=\"component-container\">\n          <div className=\"row\">\n            <div className=\"col s12 m6\">\n              <Sender />\n            </div>\n            <div className=\"col s12 m6\">\n              <Receiver />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;\n","const initState = {\n  message:'New Message'\n}\n\nconst rootReducer = (state = initState, action) => {\n  \n  switch (action.type) {\n    case 'CHANGE_STATE':\n      console.log('CHANGE_STATE', action.message)\n      //\n      return {\n        ...state,\n        message: action.message\n      }\n   \n   default:\n      return state;\n  }\n}\n\nexport default rootReducer","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { createStore, applyMiddleware, compose } from 'redux'\nimport thunk from 'redux-thunk'\nimport App from './App';\nimport {Provider} from 'react-redux'\nimport rootReducer from './store/reducers/rootReducer';\nimport * as serviceWorker from './serviceWorker';\n//\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nlet store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}